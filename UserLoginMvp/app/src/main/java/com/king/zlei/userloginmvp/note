如果写的仅仅是一个demo,实现mvp非常简单，
 1.写界面抽象的接口baseview,由该界面实现，
 2.写业务逻辑的抽象类接口，BasePresenter，写具体实现类实现并处理业务逻辑，引入view绑定,销毁(必须实现的)
 3.在view的activity层引入业务逻辑的实现类
但是在项目中使用的话需要进一步抽取封装
 1.在最底层baseview中放置所有的view都会用到的显示，比如吐司，单个界面ui显示逻辑可以另外创建子接口，一对一定制模式，显示自己某块的UI
 2.BasePresenter中使用泛型，创建基本实现类BasePresenterImp,因为绑定解绑view这里面所有的presenter都会有，具体在创建对应某块的接口比如MainPresenter实现业务逻辑，创建实现类MainPresenterImp
 继承BasePresenterImp,实现MainPresenter;
 3.在界面内拿到MainPresenterImp实现高某块逻辑

 Mvp创建缺点：类太多，优点解耦


 Dagger2使用：注解解耦
 1.配置：project中添加  classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
 buildscript {
     repositories {
         jcenter()
     }
     dependencies {
         classpath 'com.android.tools.build:gradle:2.2.2'
         classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
         // in the individual module build.gradle files
     }
 }

 添加：apply plugin: 'com.neenbedankt.android-apt'//添加apt命令
 添加依赖：apt 'com.google.dagger:dagger-compiler:2.4'//置顶注解器
          compile 'com.google.dagger:dagger:2.4'//dagger公用api

2：简单使用
    @Inject 在需要依赖的地方使用，构造出类的实例满足他们的额依赖
    @Module Modules类里面的方法专门提供的依赖，
    @Provide modules中方法的注解，提供依赖
    @Component 注入器，是@Inject和@Module的桥梁，连接两个部分
    @Scope:Scope自定义注解限定注解作用域
    @Qualifier:当类的类型不足以鉴定一个依赖的时候可以使用这个注解标识

    MainActivity(@inject)->component(接口桥梁，提供实例 @Component(modules = {XXXModule.class})依赖modules)->Module(@Module  @provide方法)
    切记：Rebuild

    MainPresenterIml_Factory与MainPresenterIml对应：
    get():返回的MainPresenterIml，是需要的实例对象，最后一定调用的get()方法实例化对象；
    viewprovide.get()返回的就是我们需要的MainBaseview
    create()：创建本类对象并返回

    MainModule_ProvideMainBaseFactory与MainModule对应：
    get():返回值是MainBaseView;viewProvider就是MainModule_ProvideMainBaseFactory
    create():创建本类对象